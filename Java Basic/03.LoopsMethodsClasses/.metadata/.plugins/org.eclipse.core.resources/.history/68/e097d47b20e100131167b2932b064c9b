import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.applet.Applet;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import java.applet.Applet;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.*;
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import java.awt.geom.*;


public class Bird extends Applet implements Runnable, KeyListener {
	private StartGame sGame = new StartGame();
	
	public Image bird;
	public double angle= 0.0 ;	
	//initial X,Y for the bird
	public int initX = 50;
	public int initY = 100;
	public int dx,dy;
	//set size of the bird
	private int birdWidth =  75;
	private int birdHeight = 50;
	
	//current status of the bird
	private boolean isFlying = false;
	private boolean isMovingFront = false;
	private boolean up = false;
	private boolean gameOver = false;
	
	//movement steps
	private int stepUp = 5;
	private int stepFront = 3;
	private int fallDown = 2;
	private int returnBack = 1;
	
	//is the bird is dead
	private boolean isDead = false;
	
	///////////////////////
	// GETTERS & SETTERS //
	///////////////////////
	public int getInitX() {
		return initX;
	}
	public void setInitX(int initX) {
		this.initX = initX;
	}
	public int getInitY() {
		return initY;
	}
	public void setInitY(int initY) {
		this.initY = initY;
	}	
	public void setFlying(boolean isFlying) {
		this.isFlying = isFlying;
	}
	public void setMovingFront(boolean isMovingFront) {
		this.isMovingFront = isMovingFront;
	}
	public int getBirdWidth() {
		return birdWidth;
	}
	public int getBirdHeight() {
		return birdHeight;
	}

	
	public void init() {
		setFocusable(true);
		//bird
				bird = getImage(getCodeBase(),"bird.png");
				dx=bird.getWidth(this);
				dy=bird.getHeight(this);
			
				if (dx < 1) {                       
					int j = 0 ; 
					while (bird.getWidth(this) < 1) { 
						j++ ;
						if (j++ > 100000) break ; 
					}
				}
				dx=bird.getWidth(this);
				dy=bird.getHeight(this);
				/////////////
				addKeyListener(this);
	}
	
	
	public void update() {	
		//If the space is pressed
		if (isFlying) {
			initY -= stepUp;
		} else {
			initY += fallDown;
		}
		
		//if the right key is pressed
		if (isMovingFront) {
			initX += stepFront;
		} else {
			initX -= returnBack;
		}
		
		//restricts the flying area of the bird
		if (initY <= 1) {
			initY = 2;
		} else if (initY >= sGame.getHeight()-birdHeight) {
			initY = sGame.getHeight()-birdHeight;
		}		
		if (initX >= sGame.getWidth()/2) {
			initX = sGame.getWidth()/2;
		} else if (initX <= 20) {
			initX = 20;
		}	
	}
	
	public void paint(Graphics g) {		
		g.setColor(Color.GREEN);
		g.fillRect(initX, initY, birdWidth, birdHeight);
		
		Graphics2D g2 = (Graphics2D) g;
		AffineTransform turn = new AffineTransform();

		turn.translate(initX,initY);
		turn.rotate(Math.toRadians(angle), (dx/2), (dy/2) );
		g2.drawImage(bird, turn, this);
	}
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			up = true;
			if(angle>-15)angle=angle-10;

		}

	}

	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			up = false;
			angle=0;
		}
	}
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	public void run() {
		while (true) {		
			if (!gameOver) {
				
				//rotating bird
				if(initY<520)initY += 2;
				else{
					angle=180.0;
					initY=630;
					initX+=80;
					gameOver = true;
				}
				//angle=0.0;
				if (up == true) {
					initY -= 8;
				}
				if (initY < 2) {
					initY = 4;
				}
			}
		}
	}
}
